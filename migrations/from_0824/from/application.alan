users
	dynamic :  . 'Users'
	password : . 'Password'

interfaces

root {
	#can-read: user

	'Users': collection {
		'Name': text @identifying
		'Password': text
		'Roles': group {
			'Manager': stategroup (
				'Yes' -> { }
				'No' -> { }
			)
			'Project Manager': stategroup (
				'Yes' -> { }
				'No' -> { }
			)
			'Employee': stategroup (
				'Yes' -> { }
				'No' -> { }
			)
		}
		'Contracts': collection {
			'Time Per Week': natural 'Minutes'
			'Active': stategroup (
				'Yes' -> { }
				'No' -> { }
			)
		}
	}

	'Years': collection {
		'Closed': stategroup (
			'Yes' -> { }
			'No' -> { }
		)

		'Project Groups': collection {
			'Owner': text -> forward .^ % 'Users'
			'Comments': text
			'Sections': collection {
				'Projects': reference-set
					-> . 'Years' . 'Projects' ? 'Billable' | 'Yes'
					=> inverse > 'Section'
				'Rate': integer '€/hour'
				'Declaration Method': stategroup (
					'Fixed Price' -> {
						'Final Amount': integer '€'
					}
					'Declaration' -> {
						'Budget': integer 'Hours'
						'Budget Amount':= integer '€' = product (
							# 'Budget' as 'Hours',
							?^ # 'Rate'
						)
					}
				)
				'Declaration Budget':= integer '€' = switch ( ? 'Declaration Method' ) (
					|'Fixed Price' = $ # 'Final Amount'
					|'Declaration' = $ # 'Budget Amount'
				)
				'Expenses Budget': integer '€'
				'Total Budget':= integer '€' = sumlist (
					# 'Declaration Budget',
					# 'Expenses Budget'
				)
			}
			'Total Budget':= integer '€' = sum . 'Sections' # 'Total Budget'
		}

		'Projects': collection {
			'Active': stategroup (
				'Yes' -> { }
				'No' -> { }
			)
			'Subsidized': stategroup (
				'Yes' -> { }
				'No' -> { }
			)
			'Registrations On Project': reference-set
				-> . 'Years' % 'Users' % 'Weeks' % 'Days' . 'Registrations' ? 'Activity' | 'Worked On Project'
				=> inverse > 'Project'
			'Registered Time':= integer 'Minutes' = sum < 'Registrations On Project' ?^ # 'Duration'
			'Project Group': text -> .^ . 'Project Groups'
			'Billable': stategroup (
				'No' -> { }
				'Yes' -> {
					'Section': text -> ?^ > 'Project Group' . 'Sections' -< 'Projects'
					'Budget': natural 'Minutes'
					'Declarations': collection {
						'Minutes': natural 'Minutes'
					}
					'Declared':= integer 'Minutes' = sum . 'Declarations' # 'Minutes'
					'Remaining Budget':= integer 'Minutes' = sumlist (
						# 'Budget',
						- # 'Declared'
					)
				}
			)
		}

		'Weeks': collection {
			'Days': collection {
				'Date': integer 'Date'
				'Is a Holiday': stategroup (
					'No' -> { }
					'Yes' -> {
						'Holiday': text
					}
				)
				'Week Day': stategroup (
					'Monday' -> { }
					'Tuesday' -> { }
					'Wednesday' -> { }
					'Thursday' -> { }
					'Friday' -> { }
					'Saturday' -> { }
					'Sunday' -> { }
				)
			}
		}
		'Users': collection -> .^ . 'Users' {
			'Subsidized': stategroup (
				'Yes' -> { }
				'No' -> { }
			)
			'Weeks': collection -> %^ . 'Weeks' {
				'Days': collection -> >key . 'Days' {
					'Registrations': collection {
						'Duration': natural 'Minutes'
						'Activity': stategroup (
							'Worked On Project' -> {
								'Project': text -> ?^ .^ %^ %^ %^ . 'Projects' -< 'Registrations On Project'
							}
							'Holiday' -> { }
							'Sick Leave' -> { }
							'Furlough' -> {
								'Furlough Taken':= natural 'Minutes' = ?^ # 'Duration'
							}
							'TBD' -> { }
						)
						'Description': text
					}
					'Total Duration' := integer 'Minutes' = sum . 'Registrations' # 'Duration'
					'Furlough Taken':= integer 'Minutes' = sum . 'Registrations' ? 'Activity' | 'Furlough' # 'Furlough Taken'
				}
				'Submitted': stategroup (
					'No' -> { }
					'Yes' -> {
						'Fixed Contract': stategroup (
							'No' -> { }
							'Yes' -> {
								'Contract': text -> ?^ ?^ %^ >key . 'Contracts'
								'Contractual Time Per Week':= natural 'Minutes' = > 'Contract' # 'Time Per Week'
							}
						)
						'Approved': stategroup (
							'No' -> { }
							'Yes' -> {
								'Timestamp': integer 'Time'
								'Approver': text -> ?^ ?^ %^ %^ .^ . 'Users'
							}
						)
					}
				)
				'Total Duration' := integer 'Minutes' = sum % 'Days' # 'Total Duration'
				'Furlough Taken':= integer 'Minutes' = sum % 'Days' # 'Furlough Taken'
				'Overtime Known':= stategroup = switch ( ? 'Submitted' ) (
					| 'No' = 'No'
					| 'Yes' = switch ( $ ? 'Fixed Contract' ) (
						| 'No' = 'No'
						| 'Yes' = 'Yes' ( 'Contract Known' => $ )
					)
				)
				(
					'No' -> { }
					'Yes' ( 'Contract Known' : . 'Years' % 'Users' % 'Weeks' ? 'Submitted'|'Yes' ? 'Fixed Contract'|'Yes' ) -> {
						'Deviation':= integer 'Minutes' = sumlist (
							?^ # 'Total Duration',
							- & 'Contract Known' # 'Contractual Time Per Week'
						)
					}
				)
			}
			'Furlough Budget': integer 'Minutes'

			'Furlough Taken' := integer 'Minutes' = sum % 'Weeks' # 'Furlough Taken'

			'Furlough Remaining':= integer 'Minutes' = sumlist (
				# 'Furlough Budget',
				- # 'Furlough Taken'
			)
			'Overtime':= integer 'Minutes' = sum % 'Weeks' ? 'Overtime Known'|'Yes' # 'Deviation'

			'Furlough Budget Remaining':= integer 'Minutes' = sumlist (
				# 'Furlough Budget',
				# 'Overtime',
				- # 'Furlough Taken'
			)
		}
	}
}

numerical-types
	'Date'
	'Time'
	'Hours'
	'Minutes'
	'€' = 'Hours' * '€/hour'
	'€/hour'
