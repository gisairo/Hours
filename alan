#!/bin/bash
set -e

# Alan is...
# - A bootstrapping solution for utilities needed to interact with Alan projects
# - A shorthand for these utilities
# - A proxy to build system and compiler tools in an Alan project
#
# If an "offline" file is present in the project, it will not download anything.


VERSION="2018.39"

function find_up {
	UP_DIR=$(pwd)
	while [[ "$UP_DIR" != "" && ! -e "$UP_DIR/$1" ]]; do
		UP_DIR=${UP_DIR%/*}
	done
	echo "$UP_DIR"
}

BASEDIR=$(dirname "$0")
SCRIPTDIR=$(cd "$BASEDIR"; pwd)
INSTALL_ROOT=$(find_up "versions.json")

function download_self {
	if [[ -e "$INSTALL_ROOT/offline" ]]; then
		echo "Cannot download in offline mode"
		echo "Remove the 'offline' file to re-enable downloads"
		exit 0
	fi
	if [[ -f "$INSTALL_ROOT/versions.json" && -f "$SCRIPTDIR/.alan/alan-tools/jq" ]]; then
		READVER=$("$SCRIPTDIR/.alan/alan-tools/jq" -r '.["platform version"]' < "$INSTALL_ROOT/versions.json")
		if [[ $READVER != "" ]]; then
			if [[ $READVER != "$VERSION" ]]; then
				STARTOVER="true"
			fi
			VERSION=$READVER
		fi
	fi
	curl -s "https://dist.m-industries.com/share/alan/alan-$VERSION-$PLATFORM.tar.gz" | tar xzfC - "$SCRIPTDIR"
	if [[ $STARTOVER == "true" ]]; then
		echo "Alan has been upgraded. Please run your command again."
		exit 1
	fi
}

if [[ $(uname) == "Darwin" ]]; then
	PLATFORM="darwin-x64"
elif [[ $(uname) == "Linux" ]]; then
	PLATFORM="linux-x64"
else
	PLATFORM="windows-x64"
fi

if [[ $2 == "--format" ]]; then
	format="$2 $3"
else
	format=""
fi

case $1 in
	--version)
		echo "$VERSION"
		exit
		;;

	--help)
		echo "Usage:"
		echo "  alan (bootstrap|build|package|connect|script|upgrade) [options]"
		echo "  alan --help"
		echo "  alan --version"
		echo ""
		echo "  f, bootstrap        Download tools for an environment (aka. fetch)"
		echo "  b, build [-C 'dir'] Build the project, optionaly from a specific directory"
		echo "  p, package          Package a project for deployment"
		echo "  c, connect          Connect to an application-server (requires Linux or macOS)"
		echo "  s, script           List available scripts"
		echo "  u, upgrade          Download the latest versions.json for projects"
		echo ""
		echo "More info: https://alan-platform.com/docs/"
		echo ""

		"$SCRIPTDIR/.alan/alan-tools/package.sh" --help
		;;

	u | upgrade)
		download_self
		curl -s -L -o versions.json "https://alan-platform.com/versions/versions.json"
		;;

	p | package)
		download_self
		shift 1
		"$SCRIPTDIR/.alan/alan-tools/package.sh" "$@"
		;;

	f | bootstrap | fetch)
		if [[ $2 == "--version" ]]; then
			VERSION=$3
			shift 2
		fi
		download_self

		if [[ "$2" == "" ]]; then
			# allow shorthand for devenv + dataenv
			pushd "$INSTALL_ROOT" >> /dev/null
			"$SCRIPTDIR/.alan/alan-tools/fetch" devenv
			"$SCRIPTDIR/.alan/alan-tools/fetch" dataenv
			popd >> /dev/null
		else
			shift 1
			pushd "$INSTALL_ROOT" >> /dev/null
			"$SCRIPTDIR/.alan/alan-tools/fetch" "$@"
			popd >> /dev/null
		fi
		;;

	c | connect)
		shift 1
		"$SCRIPTDIR/.alan/alan-tools/application-client" "$@"
		;;

	s | script)
		find . -regex "\\./.alan/[a-z]*env/system-types/.*\\.sh"
		;;

	b | build)
		if [[ $2 == "-C" ]]; then
			cd "$3"
		fi
		if [[ $(find_up "migration.alan") ]]; then
			cd "$(find_up "migration.alan")/.."
		fi
		if [[ ${PWD##*/} == "migrations" ]]; then
			for d in *; do
				if [[ -d "$d" ]]; then
					echo "Building $d"
					"$INSTALL_ROOT/.alan/dataenv/platform/project-compiler/tools/compiler-project" "$INSTALL_ROOT/.alan/dataenv/system-types/datastore/language-migration" $format --log warning -C "$d" "$INSTALL_ROOT/dist/$d.migration"
				fi
			done
		else
			pushd "$INSTALL_ROOT" >> /dev/null
			"$INSTALL_ROOT/.alan/devenv/platform/project-build-environment/tools/buildenvironment-build-system" "$INSTALL_ROOT/.alan/devenv/platform/project-build-configuration/package" $format "$INSTALL_ROOT/dist/project.pkg"
			popd >> /dev/null
		fi
		;;
	*)
		echo "Unknown command, run with --help for available commands"
		;;
esac
